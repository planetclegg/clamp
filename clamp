#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

import argparse, os, sys
import re
import shlex
try:
    import configparser
except ImportError:
    import ConfigParser as configparser

try:
    import argcomplete
except: 
    pass

__version__ = "0.0.1"

def get_vars(searchstr):
    #Find variables in the form $(-x=y) or just $(-x)
    #Return a list of these vars with there default values in the form ((x,y), ...)
    #I looked at soem existing templating engines but did not seem to do
    #exactly what I needed, and this was easy enough....
    sub = re.compile('\$\((\-\w+)=?([^\)\(]*)\)')
    subvars = list(set(sub.findall(searchstr)))

    return subvars

def var_replace(subvars, args, searchstr):
    sub = re.compile('\$\(\-\w+=?[^\(\)]*\)')
    
    for s in subvars:
        replstr = ""
        if s[1]:
            replstr = '$(%s=%s)'%s
        else:
            replstr = '$(%s)'%s[0]
        arg = None
        try:
            arg = args[s[0].split('-')[1]]
        except:
            pass
        searchstr = searchstr.replace(replstr, arg if arg else s[1])
    return searchstr


class ConfigParser(configparser.ConfigParser):
    """subclass that can get options() without defaults
    """
    def options(self, section, no_defaults=False, **kwargs):
        if no_defaults:
            try:
                return list(self._sections[section].keys())
            except KeyError:
                raise NoSectionError(section)
        else:
            return super().options(section, **kwargs)


section_commands="COMMANDS"
config = ConfigParser()
config.optionxform = str  # use case-sensitivity
config.read('.clamp')
if not config.has_section(section_commands):
    raise Error(".clamp file not found or missing [COMMANDS] section!!")


# where things are defined in [DEFAULT] override with values from environment if they exist
defaults = config.defaults()
for name in defaults.keys():
    if (name in os.environ):
        config.set('DEFAULT',name, os.environ[name])

def expandCommand(cmdName, arguments, depth):
    if (depth > 5):
        raise Exception("too much recursion");
    if debug:
        print("expandCommand %s: %s" % (cmdName, arguments))
    if cmdName in config.options(section_commands, no_defaults=True):
        commandText = config.get(section_commands, cmdName)
        #print ("FOUND " + commandText)
        parser = argparse.ArgumentParser(description=cmdName)
        cmd_args = get_vars(commandText)
        #print ("cmd_args=%s" % cmd_args)
        for a in cmd_args:
            parser.add_argument(a[0], default=a[1], required=False if a[1] else True)
        if depth == 0:
            try:
                #print ("argcomplete!!!!!!!!!!!!!!!!!")
                argcomplete.autocomplete(parser)
            except:
                pass
        args = parser.parse_args(args=arguments)
        command = var_replace(cmd_args, vars(args), commandText)
        # if debug:
        #     print ("expandedCommand = " + command)

        if command.startswith("@"):
            reparsed = shlex.split(command) # use shlex to handle quotes in a sane fashion
            nextCommand = reparsed[0][1:] # get command with @ 
            nextCommandArgs = reparsed[1:] # get everything after command
            command = expandCommand(nextCommand, nextCommandArgs, depth+1) # recurse

        return command
    else:
        raise Exception ("COULDNT FIND COMMAND: " + cmdName)
    #print ("END expandCommand")


parser = argparse.ArgumentParser(description='CLAMP')
parser.add_argument('--version', action='version', version='%(prog)s '+__version__)
parser.add_argument('--debug', action="store_true", help="dump command to output")
parser.add_argument('--list', action="store_true", help="List commands")
choices = config.options(section_commands, no_defaults=True)
parser.add_argument('command', nargs=argparse.REMAINDER, choices=choices, help="user defined command: {%s}"%(','.join(choices)), metavar="command")
try:
    argcomplete.autocomplete(parser)
except:
    pass
args = parser.parse_args()

# show help if no args
if len(sys.argv) < 2:
    parser.print_help()
    sys.exit(1)

debug =False
if args.debug:
     debug=True
     sys.argv.pop(0) # HACKY.. --debug must be first option

if args.list:
    print ("Defaults:")
    for (name,value) in config.defaults().items():
        print ('  %s = %s' % (name, value))
    print()
    print("Available commands:")
    for name in config.options(section_commands, no_defaults=True):
        print ('  %s = %s' % (name, config.get(section_commands, name)))
    print()

elif args.command:
    #print (sys.argv)
    cmdName = args.command[0]
    command = expandCommand(cmdName, sys.argv[2:], 0)
    if debug:
        print("FINAL COMMAND: " + command)
    else:
        os.system(command)
